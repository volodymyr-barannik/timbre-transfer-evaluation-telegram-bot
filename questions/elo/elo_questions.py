import logging
import random
import time
import uuid
from enum import Enum
from typing import Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext

from data.local_drive import TimbreTransferAudioExample, AudioDatasetPerFolder, AudioDatasetPerFolderCollection
from data.postgresql.elo.postgresql_operations import record_user_data, record_example_data, record_response_data
from questions.elo.base_elo_question import BaseEloQuestion
from questions.elo.sound_quality_elo_question import SoundQualityEloQuestion
from questions.elo.timbre_similarity_elo_question import BaseTimbreSimilarityEloQuestion, \
    AudioExampleInstrumentType, SourceTimbreSimilarityEloQuestion, TargetTimbreSimilarityEloQuestion
from questions.states import ExampleQuestionsStates


class EloState(Enum):
    WaitingForStart = 0
    SuggestingToStart = 1
    Polling = 2


class RandomEloQuestionsStateMachine(object):

    def __init__(self,
                 n_examples_to_show: int,
                 question_types_and_probabilities: {BaseEloQuestion: float},
                 eval_datasets: AudioDatasetPerFolderCollection,
                 reference_datasets: AudioDatasetPerFolderCollection):
        self.n_examples_to_show = n_examples_to_show
        self.question_types_and_probabilities: {BaseEloQuestion: float} = question_types_and_probabilities

        self._current_state: EloState = EloState.WaitingForStart  # Not started yet
        self._current_example_number = 0  # Not started yet
        self._current_question: Optional[BaseEloQuestion] = None
        self._current_question_type = None

        self._eval_datasets = eval_datasets
        self._reference_datasets = reference_datasets

        self.poll_uuid = str(uuid.uuid4())
        self._user_id: Optional[int] = None

        self._my_messages = []
        self._last_question_timestamp: Optional[int] = None

    def _get_random_question_type(self):
        return random.choices(population=list(self.question_types_and_probabilities.keys()),
                              weights=list(self.question_types_and_probabilities.values()),
                              k=1)[0]

    def suggest_to_start(self, update: Update, context: CallbackContext):

        self._current_state = EloState.SuggestingToStart

        keyboard = [
            [InlineKeyboardButton("Go!", callback_data='go')],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        intro_message = update.message.reply_text(f'Hello. I\'ll ask you {self.n_examples_to_show} questions.\n'
                                                  f'Each question has two audios that were generated by a neural network. You need to say which one is better ü•∞üëç'
                                                  f'\n\nAnd if something sounds really bad ü§Æ then don\'t be shy and dislike it üëé'
                                                  f'\n\nYour feedback will make the neural network better. Ready?',
                                                  reply_markup=reply_markup)

        # self._my_messages += [intro_message.message_id]

    def ask_next_question(self, update: Update, context: CallbackContext):

        if self._current_example_number < self.n_examples_to_show:

            self._current_question_type = self._get_random_question_type()

            if self._current_question_type is SoundQualityEloQuestion:
                self._current_question = SoundQualityEloQuestion(eval_datasets=self._eval_datasets)

            elif self._current_question_type is SourceTimbreSimilarityEloQuestion:
                self._current_question = SourceTimbreSimilarityEloQuestion(eval_datasets=self._eval_datasets,
                                                                           reference_datasets=self._reference_datasets)

            elif self._current_question_type is TargetTimbreSimilarityEloQuestion:
                self._current_question = TargetTimbreSimilarityEloQuestion(eval_datasets=self._eval_datasets,
                                                                           reference_datasets=self._reference_datasets)

            else:
                raise NotImplemented()

            assert (self._current_question is not None)

            self._current_example_number += 1
            self._say_example_number(update=update, context=context)
            self._current_question.ask_user(update=update, context=context)
            self._last_question_timestamp = time.time()

        else:

            self._say_goodbye(update=update, context=context)
            self._current_state = EloState.WaitingForStart

    def process_reply(self, update: Update, context: CallbackContext):
        query = update.callback_query

        if self._current_state == EloState.SuggestingToStart and query.data == 'go':
            print('received go')

            user = update.effective_chat
            record_user_data(user_id=user.id,
                             username=user.username,
                             user_first_name=user.first_name)

            self._user_id = user.id
            self._chat_id = user.id

            # Clear introduction message
            self._clear_messages(update=update, context=context)
            self._current_state = EloState.Polling
            return

        elif self._current_state == EloState.Polling:

            # The user wants to restart during the poll
            if query.data == 'go':
                self._current_state = EloState.WaitingForStart
                self.suggest_to_start(update=update, context=context)
                return

            current_time = time.time()
            elapsed_time = current_time - self._last_question_timestamp

            first_score, second_score = None, None
            try:
                _, first_score, _, second_score = query.data.split('_')[1:]
            except (ValueError, IndexError) as e:
                logging.error(f'Unable to unpack query.data: {query.data}')

            audio_example_1 = self._current_question.eval_audio_example_1
            audio_example_2 = self._current_question.eval_audio_example_2

            audio_example_1_id: int = record_example_data(example_audio=audio_example_1)
            audio_example_2_id: int = record_example_data(example_audio=audio_example_2)

            record_response_data(poll_uuid=self.poll_uuid,
                                 chat_id=self._chat_id,
                                 user_id=self._user_id,
                                 example_number=self._current_example_number,

                                 question_type=self._current_question.get_name_of_question_type(),
                                 first_example_id=audio_example_1_id,
                                 first_score=first_score,
                                 second_example_id=audio_example_2_id,
                                 second_score=second_score,
                                 elapsed_time=elapsed_time)

            self._current_question.clear_messages(update=update, context=context)

    def _clear_messages(self, update: Update, context: CallbackContext):
        for message_id in self._my_messages:
            context.bot.delete_message(chat_id=update.effective_chat.id, message_id=message_id)

        self._my_messages.clear()

    def _say_example_number(self, update: Update, context: CallbackContext):
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text=f"Example #{self._current_example_number}/{self.n_examples_to_show}:")

    def _say_goodbye(self, update: Update, context: CallbackContext):
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text=f"üéâüéäü•á Thanks for your participation! "
                                      f"You've helped us a lot.\n"
                                      f"If you want to try again and listen to some other samples, "
                                      f"use /start command.")
